"use client"

import { useState } from "react"
import { Card, CardContent } from "@/components/ui/card"
import { Button } from "@/components/ui/button"
import { Progress } from "@/components/ui/progress"
import { Badge } from "@/components/ui/badge"
import { Mic, Volume2, Loader2, Wifi, WifiOff, Zap, Brain } from "lucide-react"

interface VoiceInterfaceProps {
  language: string
  isOnline: boolean
}

export default function VoiceInterface({ language, isOnline }: VoiceInterfaceProps) {
  const [isListening, setIsListening] = useState(false)
  const [transcript, setTranscript] = useState("")
  const [response, setResponse] = useState("")
  const [isProcessing, setIsProcessing] = useState(false)
  const [confidence, setConfidence] = useState(0)
  const [processingStage, setProcessingStage] = useState("")

  const greetings = {
    en: "Hello! I'm your AI health and agriculture assistant. How can I help you today?",
    hi: "рдирдорд╕реНрддреЗ! рдореИрдВ рдЖрдкрдХрд╛ AI рд╕реНрд╡рд╛рд╕реНрдереНрдп рдФрд░ рдХреГрд╖рд┐ рд╕рд╣рд╛рдпрдХ рд╣реВрдВред рдЖрдЬ рдореИрдВ рдЖрдкрдХреА рдХреИрд╕реЗ рдорджрдж рдХрд░ рд╕рдХрддрд╛ рд╣реВрдВ?",
    gu: "ркиркорк╕рлНркдрлЗ! рк╣рлБркВ ркдркорк╛рк░рлЛ AI ркЖрк░рлЛркЧрлНркп ркЕркирлЗ ркХрлГрк╖рк┐ рк╕рк╣рк╛ркпркХ ркЫрлБркВ. ркЖркЬрлЗ рк╣рлБркВ ркдркорк╛рк░рлА ркХрлЗрк╡рлА рк░рлАркдрлЗ ркоркжркж ркХрк░рлА рк╢ркХрлБркВ?",
    mr: "рдирдорд╕реНрдХрд╛рд░! рдореА рддреБрдордЪрд╛ AI рдЖрд░реЛрдЧреНрдп рдЖрдгрд┐ рд╢реЗрддреА рд╕рд╣рд╛рдпреНрдпрдХ рдЖрд╣реЗ. рдЖрдЬ рдореА рддреБрдореНрд╣рд╛рд▓рд╛ рдХрд╢реА рдорджрдд рдХрд░реВ рд╢рдХрддреЛ?",
  }

  const sampleQueries = {
    en: [
      "I have fever and headache since 2 days",
      "My wheat crop leaves are turning yellow",
      "What's today's onion price in nearby mandi?",
      "Find nearest doctor for chest pain",
      "How to treat stem borer in rice?",
      "When should I apply fertilizer to cotton?",
    ],
    hi: [
      "рдореБрдЭреЗ 2 рджрд┐рди рд╕реЗ рдмреБрдЦрд╛рд░ рдФрд░ рд╕рд┐рд░рджрд░реНрдж рд╣реИ",
      "рдореЗрд░реА рдЧреЗрд╣реВрдВ рдХреА рдлрд╕рд▓ рдХреЗ рдкрддреНрддреЗ рдкреАрд▓реЗ рд╣реЛ рд░рд╣реЗ рд╣реИрдВ",
      "рдирдЬрджреАрдХреА рдордВрдбреА рдореЗрдВ рдЖрдЬ рдкреНрдпрд╛рдЬ рдХрд╛ рднрд╛рд╡ рдХреНрдпрд╛ рд╣реИ?",
      "рд╕реАрдиреЗ рдХреЗ рджрд░реНрдж рдХреЗ рд▓рд┐рдП рдирдЬрджреАрдХреА рдбреЙрдХреНрдЯрд░ рдЦреЛрдЬреЗрдВ",
      "рдзрд╛рди рдореЗрдВ рддрдирд╛ рдЫреЗрджрдХ рдХрд╛ рдЗрд▓рд╛рдЬ рдХреИрд╕реЗ рдХрд░реЗрдВ?",
      "рдХрдкрд╛рд╕ рдореЗрдВ рдЦрд╛рдж рдХрдм рдбрд╛рд▓рдирд╛ рдЪрд╛рд╣рд┐рдП?",
    ],
    gu: [
      "ркоркирлЗ 2 ркжрк┐рк╡рк╕ркерлА ркдрк╛рк╡ ркЕркирлЗ ркорк╛ркерк╛ркирлЛ ркжрлБркЦрк╛рк╡рлЛ ркЫрлЗ",
      "ркорк╛рк░рк╛ ркШркЙркВркирк╛ рккрк╛ркХркирк╛ рккрк╛ркВркжркбрк╛ рккрлАрк│рк╛ ркеркИ рк░рк╣рлНркпрк╛ ркЫрлЗ",
      "ркиркЬрлАркХркирк╛ ркоркВркбрлАркорк╛ркВ ркЖркЬрлЗ ркбрлБркВркЧрк│рлАркирлЛ ркнрк╛рк╡ рк╢рлБркВ ркЫрлЗ?",
      "ркЫрк╛ркдрлАркирк╛ ркжрлБркЦрк╛рк╡рк╛ ркорк╛ркЯрлЗ ркиркЬрлАркХркирк╛ ркбрлЙркХрлНркЯрк░ рк╢рлЛркзрлЛ",
      "ркЪрлЛркЦрк╛ркорк╛ркВ ркжрк╛ркВркбрлА ркЫрлЗркжркХркирлЛ ркЗрк▓рк╛ркЬ ркХрлЗрк╡рлА рк░рлАркдрлЗ ркХрк░рк╡рлЛ?",
      "ркХрккрк╛рк╕ркорк╛ркВ ркЦрк╛ркдрк░ ркХрлНркпрк╛рк░рлЗ ркирк╛ркЦрк╡рлБркВ ркЬрлЛркИркП?",
    ],
    mr: [
      "рдорд▓рд╛ 2 рджрд┐рд╡рд╕рд╛рдВрдкрд╛рд╕реВрди рддрд╛рдк рдЖрдгрд┐ рдбреЛрдХреЗрджреБрдЦреА рдЖрд╣реЗ",
      "рдорд╛рдЭреНрдпрд╛ рдЧрд╡реНрд╣рд╛рдЪреНрдпрд╛ рдкрд┐рдХрд╛рдЪреА рдкрд╛рдиреЗ рдкрд┐рд╡рд│реА рд╣реЛрдд рдЖрд╣реЗрдд",
      "рдЬрд╡рд│рдЪреНрдпрд╛ рдордВрдбреАрдд рдЖрдЬ рдХрд╛рдВрджреНрдпрд╛рдЪрд╛ рднрд╛рд╡ рдХрд╛рдп рдЖрд╣реЗ?",
      "рдЫрд╛рддреАрдЪреНрдпрд╛ рджреБрдЦрдгреНрдпрд╛рд╕рд╛рдареА рдЬрд╡рд│рдЪрд╛ рдбреЙрдХреНрдЯрд░ рд╢реЛрдзрд╛",
      "рднрд╛рддрд╛рдордзреНрдпреЗ рд╕реНрдЯреЗрдо рдмреЛрд░рд░рдЪрд╛ рдЙрдкрдЪрд╛рд░ рдХрд╕рд╛ рдХрд░рд╛рд╡рд╛?",
      "рдХрд╛рдкрд╕рд╛рд▓рд╛ рдЦрдд рдХрдзреА рдШрд╛рд▓рд╛рд╡реЗ?",
    ],
  }

  const handleVoiceInput = async (query: string) => {
    setTranscript(query)
    setIsProcessing(true)
    setConfidence(Math.random() * 30 + 70) // Simulate confidence 70-100%

    // Simulate AI processing stages
    const stages = [
      language === "hi" ? "рдЖрд╡рд╛рдЬрд╝ рдкрд╣рдЪрд╛рди рд░рд╣рд╛ рд╣реИ..." : "Recognizing voice...",
      language === "hi" ? "рднрд╛рд╖рд╛ рд╕рдордЭ рд░рд╣рд╛ рд╣реИ..." : "Understanding language...",
      language === "hi" ? "AI рд╡рд┐рд╢реНрд▓реЗрд╖рдг рдХрд░ рд░рд╣рд╛ рд╣реИ..." : "AI analyzing...",
      language === "hi" ? "рдЙрддреНрддрд░ рддреИрдпрд╛рд░ рдХрд░ рд░рд╣рд╛ рд╣реИ..." : "Preparing response...",
    ]

    for (let i = 0; i < stages.length; i++) {
      setProcessingStage(stages[i])
      await new Promise((resolve) => setTimeout(resolve, 800))
    }

    // Generate contextual AI response
    let aiResponse = ""
    const queryLower = query.toLowerCase()

    if (
      queryLower.includes("fever") ||
      queryLower.includes("рдмреБрдЦрд╛рд░") ||
      queryLower.includes("ркдрк╛рк╡") ||
      queryLower.includes("рддрд╛рдк")
    ) {
      aiResponse =
        language === "hi"
          ? "ЁЯМбя╕П рдмреБрдЦрд╛рд░ рдФрд░ рд╕рд┐рд░рджрд░реНрдж рдХреЗ рд▓рдХреНрд╖рдг: \n\nтЬЕ рддреБрд░рдВрдд рдХрд░реЗрдВ:\nтАв рдкрд╛рдиреА рдЕрдзрд┐рдХ рдкрд┐рдПрдВ (8-10 рдЧрд┐рд▓рд╛рд╕)\nтАв рдЖрд░рд╛рдо рдХрд░реЗрдВ рдФрд░ рдиреАрдВрдж рд▓реЗрдВ\nтАв рдкреИрд░рд╛рд╕рд┐рдЯрд╛рдореЛрд▓ рд▓реЗ рд╕рдХрддреЗ рд╣реИрдВ\n\nтЪая╕П рдбреЙрдХреНрдЯрд░ рд╕реЗ рдорд┐рд▓реЗрдВ рдЕрдЧрд░:\nтАв рдмреБрдЦрд╛рд░ 102┬░F рд╕реЗ рдЬреНрдпрд╛рджрд╛ рд╣реЛ\nтАв 3 рджрд┐рди рд╕реЗ рдЬреНрдпрд╛рджрд╛ рд░рд╣реЗ\nтАв рд╕рд╛рдВрд╕ рд▓реЗрдиреЗ рдореЗрдВ рддрдХрд▓реАрдл рд╣реЛ\n\nЁЯУЮ рдХреНрдпрд╛ рдореИрдВ рдЖрдкрдХреЗ рд▓рд┐рдП рдирдЬрджреАрдХреА рдбреЙрдХреНрдЯрд░ рдЦреЛрдЬреВрдВ?"
          : "ЁЯМбя╕П Fever and headache symptoms:\n\nтЬЕ Immediate care:\nтАв Drink plenty of water (8-10 glasses)\nтАв Rest and sleep well\nтАв Take paracetamol if needed\n\nтЪая╕П See doctor if:\nтАв Fever above 102┬░F\nтАв Persists more than 3 days\nтАв Breathing difficulty\n\nЁЯУЮ Should I find a nearby doctor for you?"
    } else if (
      queryLower.includes("crop") ||
      queryLower.includes("yellow") ||
      queryLower.includes("рдлрд╕рд▓") ||
      queryLower.includes("рдкреАрд▓реЗ") ||
      queryLower.includes("рккрлАрк│рк╛") ||
      queryLower.includes("рдкрд┐рд╡рд│реА")
    ) {
      aiResponse =
        language === "hi"
          ? "ЁЯМ╛ рдЧреЗрд╣реВрдВ рдХреЗ рдкрддреНрддреЗ рдкреАрд▓реЗ рд╣реЛрдирд╛:\n\nЁЯФН рд╕рдВрднрд╛рд╡рд┐рдд рдХрд╛рд░рдг:\nтАв рдирд╛рдЗрдЯреНрд░реЛрдЬрди рдХреА рдХрдореА (рд╕рдмрд╕реЗ рдЖрдо)\nтАв рдкрд╛рдиреА рдХреА рдХрдореА рдпрд╛ рдЕрдзрд┐рдХрддрд╛\nтАв рдЖрдпрд░рди рдХреА рдХрдореА\nтАв рдмреАрдорд╛рд░реА (рдкрддреНрддреА рдХрд╛ рдзрдмреНрдмрд╛ рд░реЛрдЧ)\n\nЁЯТб рд╕рдорд╛рдзрд╛рди:\nтАв рдпреВрд░рд┐рдпрд╛ 50 рдХрд┐рд▓реЛ/рдПрдХрдбрд╝ рдбрд╛рд▓реЗрдВ\nтАв рд╕рд┐рдВрдЪрд╛рдИ рдирд┐рдпрдорд┐рдд рдХрд░реЗрдВ\nтАв рдорд┐рдЯреНрдЯреА рдХреА рдЬрд╛рдВрдЪ рдХрд░рд╛рдПрдВ\n\nЁЯУ▒ рдХреНрдпрд╛ рдореИрдВ рдирдЬрджреАрдХреА рдХреГрд╖рд┐ рдХреЗрдВрджреНрд░ рдХреА рдЬрд╛рдирдХрд╛рд░реА рджреВрдВ?"
          : "ЁЯМ╛ Wheat leaves turning yellow:\n\nЁЯФН Possible causes:\nтАв Nitrogen deficiency (most common)\nтАв Water stress (too little/much)\nтАв Iron deficiency\nтАв Disease (leaf spot)\n\nЁЯТб Solutions:\nтАв Apply 50kg urea per acre\nтАв Regular irrigation\nтАв Get soil tested\n\nЁЯУ▒ Should I provide nearby agriculture center info?"
    } else if (
      queryLower.includes("price") ||
      queryLower.includes("mandi") ||
      queryLower.includes("рднрд╛рд╡") ||
      queryLower.includes("рдордВрдбреА") ||
      queryLower.includes("ркнрк╛рк╡") ||
      queryLower.includes("рдордВрдбреА")
    ) {
      aiResponse =
        language === "hi"
          ? "ЁЯТ░ рдЖрдЬ рдХреА рдордВрдбреА рд░реЗрдЯ (рдирдЬрджреАрдХреА рдордВрдбреА):\n\nЁЯзЕ рдкреНрдпрд╛рдЬ: тВ╣25-30/рдХрд┐рд▓реЛ\nЁЯУИ рдХрд▓ рд╕реЗ 5% рдмрдврд╝рдиреЗ рдХреА рд╕рдВрднрд╛рд╡рдирд╛\n\nЁЯУК рдЕрдиреНрдп рднрд╛рд╡:\nтАв рдЖрд▓реВ: тВ╣22/рдХрд┐рд▓реЛ\nтАв рдЯрдорд╛рдЯрд░: тВ╣35/рдХрд┐рд▓реЛ\nтАв рдЧреЗрд╣реВрдВ: тВ╣2,150/рдХреНрд╡рд┐рдВрдЯрд▓\n\nЁЯУ▒ SMS рдЕрд▓рд░реНрдЯ рдЪрд╛рд╣рд┐рдП? рдореИрдВ рдЖрдкрдХреЛ рд░реЛрдЬ рднреЗрдЬ рд╕рдХрддрд╛ рд╣реВрдВред\n\nЁЯТб рд╕реБрдЭрд╛рд╡: рдХрд▓ рдмреЗрдЪрдирд╛ рдмреЗрд╣рддрд░ рд╣реЛрдЧрд╛ред"
          : "ЁЯТ░ Today's mandi rates (nearest mandi):\n\nЁЯзЕ Onion: тВ╣25-30/kg\nЁЯУИ Expected to rise 5% tomorrow\n\nЁЯУК Other rates:\nтАв Potato: тВ╣22/kg\nтАв Tomato: тВ╣35/kg\nтАв Wheat: тВ╣2,150/quintal\n\nЁЯУ▒ Want SMS alerts? I can send daily updates.\n\nЁЯТб Tip: Better to sell tomorrow."
    } else if (
      queryLower.includes("doctor") ||
      queryLower.includes("chest") ||
      queryLower.includes("pain") ||
      queryLower.includes("рдбреЙрдХреНрдЯрд░") ||
      queryLower.includes("рд╕реАрдиреЗ") ||
      queryLower.includes("рджрд░реНрдж")
    ) {
      aiResponse =
        language === "hi"
          ? "ЁЯЪи рд╕реАрдиреЗ рдореЗрдВ рджрд░реНрдж - рддреБрд░рдВрдд рдзреНрдпрд╛рди рджреЗрдВ!\n\nтЪая╕П рдЧрдВрднреАрд░ рд▓рдХреНрд╖рдг рд╣реИрдВ рддреЛ 108 рдХреЙрд▓ рдХрд░реЗрдВ:\nтАв рддреЗрдЬ рджрд░реНрдж\nтАв рд╕рд╛рдВрд╕ рд▓реЗрдиреЗ рдореЗрдВ рддрдХрд▓реАрдл\nтАв рдкрд╕реАрдирд╛ рдЖрдирд╛\nтАв рдЪрдХреНрдХрд░ рдЖрдирд╛\n\nЁЯПе рдирдЬрджреАрдХреА рдбреЙрдХреНрдЯрд░:\nтАв Dr. рд░рд╛рдо рд╢рд░реНрдорд╛ - 2.1 km\nтАв PHC рд░рд╛рдордкреБрд░ - 3.5 km\nтАв рдЬрд┐рд▓рд╛ рдЕрд╕реНрдкрддрд╛рд▓ - 12 km\n\nЁЯУЮ рддреБрд░рдВрдд рдХреЙрд▓ рдХрд░реВрдВ? (рд╣рд╛рдВ/рдирд╣реАрдВ)"
          : "ЁЯЪи Chest pain - Immediate attention needed!\n\nтЪая╕П Call 108 if severe symptoms:\nтАв Sharp pain\nтАв Breathing difficulty\nтАв Sweating\nтАв Dizziness\n\nЁЯПе Nearest doctors:\nтАв Dr. Ram Sharma - 2.1 km\nтАв PHC Rampur - 3.5 km\nтАв District Hospital - 12 km\n\nЁЯУЮ Should I call immediately? (Yes/No)"
    } else {
      aiResponse = greetings[language as keyof typeof greetings] || greetings.en
    }

    setResponse(aiResponse)
    setIsProcessing(false)
    setProcessingStage("")
  }

  return (
    <Card className="fixed bottom-6 right-6 w-96 z-50 shadow-2xl border-2 border-blue-200 bg-white/95 backdrop-blur-md">
      <CardContent className="p-6 space-y-4">
        <div className="flex items-center justify-between">
          <div className="flex items-center space-x-2">
            <div className="w-3 h-3 bg-gradient-to-r from-green-500 to-blue-500 rounded-full animate-pulse"></div>
            <h3 className="font-semibold text-blue-600 flex items-center">
              <Brain className="w-4 h-4 mr-1" />
              {language === "hi" ? "AI рдЖрд╡рд╛рдЬрд╝ рд╕рд╣рд╛рдпрдХ" : "AI Voice Assistant"}
            </h3>
          </div>
          <div className="flex items-center space-x-2">
            {isOnline ? (
              <Badge variant="secondary" className="bg-green-100 text-green-700">
                <Wifi className="w-3 h-3 mr-1" />
                Online
              </Badge>
            ) : (
              <Badge variant="secondary" className="bg-orange-100 text-orange-700">
                <WifiOff className="w-3 h-3 mr-1" />
                Offline
              </Badge>
            )}
          </div>
        </div>

        {!transcript && (
          <div className="space-y-4">
            <p className="text-sm text-gray-600 leading-relaxed">
              {greetings[language as keyof typeof greetings] || greetings.en}
            </p>
            <div className="space-y-3">
              <p className="text-xs font-medium text-gray-500 flex items-center">
                <Zap className="w-3 h-3 mr-1" />
                {language === "hi" ? "рдпреЗ рдкреВрдЫрдХрд░ рджреЗрдЦреЗрдВ:" : "Try asking:"}
              </p>
              <div className="max-h-32 overflow-y-auto space-y-2">
                {(sampleQueries[language as keyof typeof sampleQueries] || sampleQueries.en).map((query, index) => (
                  <Button
                    key={index}
                    variant="ghost"
                    size="sm"
                    className="w-full text-left justify-start h-auto p-3 text-xs hover:bg-blue-50 border border-gray-200 rounded-lg"
                    onClick={() => handleVoiceInput(query)}
                  >
                    <span className="text-blue-600 mr-2">ЁЯТм</span>"{query}"
                  </Button>
                ))}
              </div>
            </div>
          </div>
        )}

        {transcript && (
          <div className="space-y-4">
            <div className="bg-blue-50 p-4 rounded-xl border border-blue-200">
              <div className="flex items-center justify-between mb-2">
                <p className="text-sm font-medium text-blue-800">{language === "hi" ? "рдЖрдкрдиреЗ рдХрд╣рд╛:" : "You said:"}</p>
                {confidence > 0 && (
                  <Badge variant="secondary" className="text-xs">
                    {Math.round(confidence)}% {language === "hi" ? "рд╕рдЯреАрдХ" : "confident"}
                  </Badge>
                )}
              </div>
              <p className="text-sm text-blue-700 font-medium">"{transcript}"</p>
            </div>

            {isProcessing ? (
              <div className="space-y-3">
                <div className="flex items-center space-x-3 text-gray-600">
                  <div className="relative">
                    <Loader2 className="w-5 h-5 animate-spin text-blue-500" />
                    <div className="absolute inset-0 w-5 h-5 border-2 border-blue-200 rounded-full animate-pulse"></div>
                  </div>
                  <span className="text-sm font-medium">{processingStage}</span>
                </div>
                <Progress value={(processingStage.length / 4) * 100} className="h-2" />
              </div>
            ) : (
              response && (
                <div className="bg-green-50 p-4 rounded-xl border border-green-200">
                  <div className="flex items-center space-x-2 mb-3">
                    <div className="w-6 h-6 bg-green-500 rounded-full flex items-center justify-center">
                      <Volume2 className="w-3 h-3 text-white" />
                    </div>
                    <p className="text-sm font-medium text-green-800">
                      {language === "hi" ? "AI рд╕реБрдЭрд╛рд╡:" : "AI Response:"}
                    </p>
                    <Badge variant="secondary" className="bg-green-100 text-green-700 text-xs">
                      <Brain className="w-3 h-3 mr-1" />
                      Smart
                    </Badge>
                  </div>
                  <div className="text-sm text-green-700 whitespace-pre-line leading-relaxed">{response}</div>
                </div>
              )
            )}

            <div className="flex space-x-2">
              <Button
                variant="outline"
                size="sm"
                onClick={() => {
                  setTranscript("")
                  setResponse("")
                  setIsProcessing(false)
                  setConfidence(0)
                }}
                className="flex-1"
              >
                {language === "hi" ? "рдирдпрд╛ рд╕рд╡рд╛рд▓" : "New Question"}
              </Button>
              <Button variant="outline" size="sm" className="px-3">
                <Volume2 className="w-4 h-4" />
              </Button>
            </div>
          </div>
        )}

        <div className="flex justify-center pt-2">
          <Button
            size="lg"
            className={`rounded-full w-16 h-16 shadow-lg transition-all duration-300 ${
              isListening
                ? "bg-gradient-to-r from-red-500 to-red-600 hover:from-red-600 hover:to-red-700 animate-pulse"
                : "bg-gradient-to-r from-blue-500 to-blue-600 hover:from-blue-600 hover:to-blue-700"
            }`}
            onClick={() => setIsListening(!isListening)}
          >
            <Mic className={`w-8 h-8 ${isListening ? "animate-pulse" : ""}`} />
          </Button>
        </div>

        <p className="text-xs text-center text-gray-500">
          {language === "hi"
            ? "рдмрдЯрди рджрдмрд╛рдХрд░ рдмреЛрд▓реЗрдВ рдпрд╛ рдКрдкрд░ рдХреЗ рд╕реБрдЭрд╛рд╡ рдкрд░ рдХреНрд▓рд┐рдХ рдХрд░реЗрдВ"
            : "Press button to speak or click suggestions above"}
        </p>
      </CardContent>
    </Card>
  )
}
